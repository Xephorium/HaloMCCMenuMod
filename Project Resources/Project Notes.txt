
////////////////////////
/// MCC Menu Modding ///
////////////////////////


/*--- Tools ---*/

UnrealPak
  File: <Engine Version>\Engine\Binaries\Win64\UnrealPak.exe
  Desc: A command line Unreal Engine tool that extracts assets from compiled .pak project files.


/*--- Full Process ---*/

1. Use UnrealPak to extract MCC-WindowsNoEditor.pak, a compressed package of all of MCC's unreal
   engine files. This will produce an incomplete, but decompiled archive of the project's original
   unreal engine assets.

     Command Format

       UnrealPak.exe <original_mcc_pak> -Extract <extract_directory>

     Command Example

       "E:\Game Dev\Unreal Engine\UE_4.21\Engine\Binaries\Win64\UnrealPak.exe" "D:\Games\Steam\steamapps\common\Halo The Master Chief Collection\MCC\Content\Paks\MCC-WindowsNoEditor.pak" -Extract "E:\Game Dev\Mods\Halo MCC Menu Overhaul\1 - Vanilla MCC Unpack"

2. Use a new, blank Unreal Project to load and partially view the extracted MCC assets. The
   extracted assets have incomplete metadata, are stripped of code (including Blueprints), and
   can't be fully opened in the editor. However, there's sometimes enough data in the Unreal
   Editor's preview to infer missing details and rebuild the source.

     Project Details
       â€¢ Name:    VanillaMCC (Doesn't Matter)
       â€¢ Version: 4.21
       â€¢ Type:    Blueprint (Not C++)

     Process
       â€¢ Copy the desired assets from the unpacked 'MCC\Content\' directory into a corresponding
         directory in 'VanillaMCC\Content\'.

3. Use a *second* blank Unreal Project to build and store reconstructions of the original MCC
   assets. In this repository, my project is stored at 'Source\Unreal Project\MCC'.

     Project Details
       â€¢ Name:    MCC (Needs to be "MCC" for cooked content path to match MCC source.)
       â€¢ Version: 4.21
       â€¢ Type:    Blueprint (C++)

     Process
       â€¢ This project holds only reconstructed UE4 assets, which are used to replace vanilla MCC
         files.
       â€¢ Each new asset must have the same name and exist in the same directory as the original
         asset it replaces. For example, if a texture lives in (Vanilla)'MCC\Content\UI\x.uasset', the reconstructed asset must be located at (New)'MCC\Content\UI\x.uasset'.

4. When ready to see changes in game, cook the (New) MCC project's content for Windows in the
   Unreal Editor.

     File > Cook Content for Windows. 

5. From the cooked project output (MCC\Saved\Cooked\WindowsNoEditor\MCC\...), delete everything
   but the content folder and the specific files within it that are meant to override Vanilla MCC
   assets.

6. Use UnrealPak to compress contents of cooked Content folder into new .pak file for MCC. Then
   Add the suffix "_P" to the new pak file's name and move it to a '~mods' directory directly
   beside the original MCC install's 'MCC-WindowsNoEditor.pak' file.

     Command Format
       
       UnrealPak.exe <output_pak> -Create=<path_to_pak_config_file>

     Command Example
       
       "E:\Game Dev\Unreal Engine\UE_4.21\Engine\Binaries\Win64\UnrealPak.exe" "D:\Games\Steam\steamapps\common\Halo The Master Chief Collection\MCC\Content\Paks\~mods\MCC-WindowsNoEditor_P.pak" -Create="E:\Game Dev\Mods\Halo MCC Menu Overhaul\3 - New MCC UE4 Project\Source\Build Scripts\ContentToRepack.txt"

     Notes
       â€¢ The '_P' suffix specifies that at runtime, unreal should treat this .pak file with
         priority, replacing the duplicate contents of any other .pak file (including the original)
         with these assets. This means we only need to build a new .pak file containing overrides,
         rather than all 10 gigs of assets needed to run MCC's unreal engine wrapper.

7. Boot MCC with Easy Anti-Cheat disabled & test changes.


/*--- Optimized (Script Assisted) Process ---*/

1. Reconstruct desired assets in correct (New) 'MCC\Content' directory.

2. Run 'RebuildHaloMenuMod.bat' to cook project & generate .pak file.

3. Boot MCC with Easy Anti-Cheat disabled & test changes.


/*--- Resources & Credits ---*/

Visuals
  Difficulty Icons
    Author: Dragon99099 (DeviantArt)
    Link: https://www.deviantart.com/dragon99099/gallery/42899520/game-related


/*--- Asset Info ---*/

Weird Naming
  â€¢ Options Panel Outline: Content\UI\Shared\Textures\Button\T_Cn_ButtonSecondary_Focus
  â€¢ Options Panel Background: Content\UI\Shared\Textures\Button\T_Cn_Btn_BG (?? Can't tell if
    actually showing changes in game.)

Buttons
  â€¢ Primary Disabled - T_Cn_BtnDisabled_Fill
  â€¢ Primary Default  - T_Cn_BtnDefault_Fill (RGBA w/ Runtime Tint)
  â€¢ Primary Hover    - T_Cn_BtnHover_Fill (Renders on TOP of Default, RGBA w/ Runtime Tint)
  â€¢ Primary Click    - T_Cn_BtnActive_Fill (No Alpha, B/W Mask)
  â€¢ ???              - T_Bn_BtnFocus_Fill (???)


/*--- Issues ---*/

Difficulty Icons Refuse to Replace
  â€¢ Tried turning off "Never Stream", various formats including png, tga, dds (BC7), no dice.


/*--- Decooking Assets ---*/

Overview
  â€¢ Unreal has limited support for viewing cooked assets by default. However, by slightly modifying
    the engine code, we can enable even more experimental cooked asset features. Doing so requires
    downloading/building the engine from source and results in a more unstable editor. Opening some
    cooked assets can cause bugs or crashes. But the entire process is outlined in detail below.
  â€¢ Video Tutorial: https://youtu.be/6unVb5gNBtM?si=2gVgMhGXVrsKWwep

Modifying Unreal Engine
  â€¢ Download Engine Source
    â€¢ Link: https://github.com/EpicGames/UnrealEngine/releases?page=4
    â€¢ Version: 4.22+ Needed for Utility Widget Editor
    â€¢ NOTE: Must download a *release* build's assets! I discovered the hard way (via 2 days of
            unsuccessfully trying to build various versions of the engine) that cloning the source
            of a particular branch from the repo page results in a download that's missing loads
            of necessary dll's, resulting in dozens of incomprehensible build errors. ðŸ’€
  â€¢ Setup Engine Project
    â€¢ Replace 'Engine/Build/Commit.gitdeps.xml' with the corresponding file included as part of the
      build's release assets to fix an issue with the 'Setup.bat' script.
      â€¢ Link: https://github.com/EpicGames/UnrealEngine/blob/4.25/Engine/Build/Commit.gitdeps.xml
    â€¢ Run 'Setup.bat'.
    â€¢ Run 'GenerateProjectFiles.bat'
      â€¢ Script may throw errors (like '.NETFramework version missing'). Follow the directions to
        install whatever's needed to get the script to succeed.
  â€¢ Open UE4.sln Solution in Visual Studio
  â€¢ Edit Engine Source to Enable Experimental Cooked Content Support
    â€¢ UE4.22 Code Edits
      â€¢ AssetEditorManager.cpp: Comment out line 326
          // return false;
      â€¢ MaterialShared.cpp: Change boolean on line 1661 to true
          bool bAssumeShaderMapIsComplete = true;
      â€¢ UObjectGlobals.cpp: Change boolean on line 64 to true
          bool GAllowUnversionedContentInEditor = true;
      â€¢ LinkerLoad.cpp: Change integer on line 85 to 1
          int32 GAllowCookedDataInEditorBuilds = 1;
      â€¢ (Optional) WindowsPlatformCompilerSetup.h: Comment out annoying build message on lines 12-14
          //#if defined(_MSC_VER) && _MSC_VER > 1929 
          //    #pragma message("Detected compiler newer than Visual Studio 2019, please...")
          //#endif
  â€¢ Build Solution
    â€¢ Set UE4 as Startup Project
    â€¢ Build UE4
    â€¢ Fix Errors: The stock build produces a few errors, which I've resolved with these changes.
      â€¢ Change the project's C++ compile version to 14 by changing line 1009-1012 of TargetRules.cs
          [RequiresUniqueBuildEnvironment]
          [CommandLine("-CppStd")]
          [XmlConfigFile(Category = "BuildConfiguration")]
          public CppStandardVersion CppStandard = CppStandardVersion.Cpp14;
      â€¢ Remove references to 'std::uinary_function' by no longer extending it in two custom structs
      â€¢ Remove references to 'std::binary_function' by no longer extending it in two custom structs

Creating A Project in Modified Unreal Engine
  â€¢ (Follow instructions in video.)


/*--- Painful Lessons ---*/

Building
  â€¢ All instances of the editor MUST be closed to build the engine. Otherwise, it fails with
    a cryptic error about not being able to replace a DLL file. Don't ask how many times I assumed
    this meant the build state was corrupted and rebuilt the ENTIRE source (~3k modules) over the
    course of an hour because of it. ðŸ’€


/*--- Useful Code Snippets ---*/

// Log Current Value of srcAsset->CompressionSettings UEnum
const UEnum* TextureCompressionSettings 
  = FindObject<UEnum>(ANY_PACKAGE, TEXT("TextureCompressionSettings"));
UE_LOG(
  LogTemp,
  Warning,
  TEXT("Current Enum: %s"),
  *(TextureCompressionSettings ? 
    TextureCompressionSettings->GetEnumName(srcAsset->CompressionSettings.GetValue()) : 
    TEXT("<Invalid Enum>"))
);

-----

// Log Current Value of srcAsset->MaterialType enum
  UE_LOG(
    LogTemp,
    Warning,
    TEXT("Material Enum: %d"),
    srcAsset->GetMaterialType()
  );

-----

// Printing a boolean
UE_LOG(LogTemp, Warning, TEXT("Ready to Export: %s"), Texture->Source.IsValid() ? TEXT("True") : TEXT("False"));

-----


/*--- Investigating The Difficulty Icons ---*/

Note: This was the point where I abandoned the project. For some reason I still can't discern,
      the MCC's mission difficulty icons *refuse* to be replaced. I've followed the same process
      as with every other image - uncook the original asset, use the metadata to reconstruct its
      unreal source, cook the new asset, and build it into the replacement pak file. I've also
      spent days tweaking every possible setting in the reconstructed texture: compression format,
      mip data, texture streaming, LOD bias, texture group etc. I even began modifying the engine
      export code to read info directly from the decooked Texture2D asset that might not be
      visible in-editor. NOTHING works. I've included the relevant code and my notes below.

      This might be the end of the line for now. 

Programmatically Parsing Uncooked Texture2D Data

  // Calls & Their Return Values
  Texture->Source.GetFormat() -> TSF_Invalid/0
  Texture->Source.IsValid()   -> False
  Texture->Source.GetSizeX()  -> 0
  Texture->GetSizeX()         -> 128
  Texture->GetNumMips()       -> 1
  Texture->GetPixelFormat()   -> PF_BC7/56

Reading pixel data from first (only) mip

  const FColor* FormatedImageData = static_cast<const FColor*>(Texture->PlatformData->Mips[0].BulkData.LockReadOnly());

  UE_LOG(LogTemp, Warning, TEXT("Pixel 1 Color: %d, %d, %d, %d"), FormatedImageData[25 * 128 + 63].R, FormatedImageData[0].G, FormatedImageData[0].B, FormatedImageData[0].A);

  //for (int32 X = 0; X < MyTexture2D->SizeX; X++)
  //{
  //  for (int32 Y = 0; Y < MyTexture2D->SizeY; Y++)
  //  {
  //    FColor PixelColor = FormatedImageData[Y * MyTexture2D->SizeX + X];
  //    // Do the job with the pixel
  //  }
  //}

  Texture->PlatformData->Mips[0].BulkData.Unlock();

BC7 Texture Format Findings
  â€¢ Unreal doesn't support importing BC7 images unless cubemap (or 2D?). However, it's supported
    as a post-import compression setting.
    â€¢ All of MCC's textures are compressed during the cook process in BC7 format, so I don't think
      this is the isssue with the difficulty icons. Other reconstructed assets are replacing fine
      in-game despite their reconstructed Unreal assets being in B8G8R8A8 format.